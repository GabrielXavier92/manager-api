// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum Plan {
  STARTER
}


model Account {
  id String          @id @default(uuid())
  plan Plan @default(STARTER)
  status Boolean  @default(true)
  name String
  users User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MASCULINO
  FEMININO
}

model User {
  id String          @id @default(uuid())
  account Account @relation(fields: [accountId], references: [id]) // Relacionamento com a conta
  accountId String // Relacionamento com a conta
  status Boolean @default(true)
  email String @unique
  password String
  name String
  gender Gender? // Enum
  roles Roles[] @relation(references: [id])  // Relacionamento com as roles
  doctor Doctor?  @relation(fields: [doctorId], references: [id]) // Relacionamento com um Doctor caso exista
  doctorId String? // Relacionamento com um Doctor caso exista
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id String @id @default(uuid())
  role String @unique
  users User[] @relation(references: [id])
}

model Doctor {
  id String          @id @default(uuid())
  account Account @relation(fields: [accountId], references: [id]) // Relacionamento com a conta
  accountId String // Relacionamento com a conta
  user User? // Relacionamento com um User caso exista
  name String
  gender Gender? // Enum
  birth String?
  register String?
  email String?
  country String?
  cep String?
  state String?
  city String?
  street String?
  neighborhood String?
  complement String?
  guides Guide[] // Relacionamento com as guias
  specialties Specialty[] // Relacionamento com as especialidades
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id String          @id @default(uuid())
  account Account @relation(fields: [accountId], references: [id]) // Relacionamento com a conta
  accountId String // Relacionamento com a conta
  name String
  gender Gender? // Enum
  birth String?
  guides Guide[] // Relacionamento com as guias
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guide {
  id String          @id @default(uuid())
  account Account @relation(fields: [accountId], references: [id]) // Relacionamento com a conta
  accountId String // Relacionamento com a conta
  doctor Doctor @relation(fields: [doctorId], references: [id]) // Relacionamento com um Doctor
  doctorId String // Relacionamento com um Doctor
  patient Patient @relation(fields: [patientId], references: [id]) // Relacionamento com um Patient
  patientId String // Relacionamento com um Patient
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id String          @id @default(uuid())
  account Account @relation(fields: [accountId], references: [id]) // Relacionamento com a conta
  accountId String // Relacionamento com a conta
  name String
  procedures Procedure[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Procedure {
  id String          @id @default(uuid())
  account Account @relation(fields: [accountId], references: [id]) // Relacionamento com a conta
  accountId String // Relacionamento com a conta
  name String
  code String
  value String
  specialty Specialty @relation(fields: [specialtyId], references: [id]) // Relacionamento com uma especialidade
  specialtyId String // Relacionamento com uma especialidade
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}