scalar DateTime

type Query {
  getProcedureTable(id: ID!): ProcedureTable!
  getProcedureTables: [ProcedureTable!]
  getProcedures(procedureTableId: ID!, take: Int!, cursor: ID, filter: String): GetProcedures
  getProcedure(id: ID!): Procedure
  getSpecialty(id: ID!): Specialty!
  getSpecialties: [Specialty!]
}

type Mutation {
  createProcedureTable(input: ProcedureTableInput!): ProcedureTable!
  updateProcedureTable(id: ID!, input: ProcedureTableInput!): ProcedureTable!
  createProcedure(input: ProcedureInput!): Procedure!
  updateProcedure(id: ID!, input: ProcedureInput): Procedure!
  createSpecialty(input: SpecialtyInput!): Specialty!
  updateSpecialty(id: ID!, input: SpecialtyInput): Specialty!
}

input ProcedureTableInput {
  name: String!
  procedures: [ProcedureInput]
}

input ProcedureInput {
  name: String!
  code: String
  value: String
  specialtyId: ID!
  procedureTableId: ID!
}

input SpecialtyInput {
  name: String!
}

type ProcedureTable {
  id: ID!
  name: String!
  procedures: [Procedure]
  createdAt: DateTime
  updatedAt: DateTime
}

type Procedure {
  id: ID!
  name: String!
  code: String
  value: String
  specialty: Specialty
  procedureTable: ProcedureTable
  createdAt: DateTime
  updatedAt: DateTime
}

type GetProcedures {
  ammount: Int!
  procedures: [Procedure]
}

type Specialty {
  id: ID!
  name: String
}